any test = import "test.bor";

# String

printLine("\nStdlib String");

test.assert(String.toUpper("helloñ"), "HELLOÑ", "String.toUpper should return the given string in uppercase");
test.assert(String.toLower("HELLOÑ"), "helloñ", "String.toLower should return the given string in lowercase");
test.assert(String.getLength("是abc"), 4, "String.getLength should return the string length");
test.assert(String.getByteLength("是不a"), 7, "String.getByteLength should return the number of bytes in the string");
test.assert(String.includes("hello how are you?", "you"), true, "String.includes should return true when the substring exists in the string");
test.assert(String.includes("hello how are you?", "you??"), false, "String.includes should return false when the substring does not exists in the string");
test.assert(String.trim("  comment: "), "comment:", "String.trim should remove by default spaces around the string");
test.assert(String.trim("hahahacomment:ha", "ha"), "comment:", "String.trim should remove the substring around in the string");
test.assert(String.leftTrim("hahahacomment:ha", "ha"), "comment:ha", "String.leftTrim should remove the trailing substring in the string");
test.assert(String.rightTrim("hahahacomment:ha", "ha"), "hahahacomment:", "String.rightTrim should remove the leading substring in the string");
test.assert(String.indexOf("hello world", "world"), 6, "String.indexOf should return the position of the substring in the string");
test.assert(String.lastIndexOf("hello world", "o"), 7, "String.lastIndexOf should return the last position of the substring in the string");
test.assert(String.indexOf("hello world", "worldd"), -1, "String.indexOf should return -1 if the substring is not in the string");
test.assert(String.lastIndexOf("hello world", "oo"), -1, "String.lastIndexOf should return -1 if the substring is not in the string");
test.assert(String.split("hello world how are you", " "), [ "hello", "world", "how", "are", "you"], "String.split should split the string into a table by the given delimiter");
test.assert(String.endsWith("how are you?", "you?"), true, "String.endsWith should return true when the string ends with the substring");
test.assert(String.startsWith("how are you?", "how "), true, "String.startsWith should return true when the string starts with the substring");
test.assert(String.getChar("abcdefghi", 6), "g", "String.getChar should return the char at the given position");
test.assert(String.slice("1234567890", 4), "567890", "String.slice should slice the string from the given starting index");
test.assert(String.slice("1234567890", 4, 7), "567", "String.slice should slice the string the given starting position to the final index");
test.assert(String.repeat("ale", 4), "alealealeale", "String.repeat should repeat the string the given number of times");
test.assert(String.isWhitespace(" \n\t  "), true, "String.isWhitespace should return true when the string has only whitespaces");
test.assert(String.replace("i'm 23 years old, just 23", "23", "18"), "i'm 18 years old, just 18", "String.replace should replace all the substring ocurrences in the string");
test.assert(String.remove("i'm 23 years old, just 23", "23"), "i'm  years old, just ", "String.remove should remove all the substring ocurrences in the string");
test.assert(String.compare("hello there?", "hello there?"), true, "String.compare should return true when both strings are equal");
test.assert(String.compare("hello there?", "hello there??"), false, "String.compare should return false when both strings are different");
test.assert(String.compareI("hello THERE?", "hello there?"), true, "String.compareI should return true when both strings are equal (case insensitive)");
test.assert(String.compareI("Hello THERe?", "hello there??"), false, "String.compareI should return false when both strings are different (case insensitive)");
test.assert(String.containsChars("longyearbyen", "aeyo"), true, "String.containsChars should return true when all the characters appear in the string");
test.assert(String.interpolate("today {name} will be {age} years old", [ 'name' = 'alex', 'age' = 23 ]), "today alex will be 23 years old", "String.interpolate should interpolate the table values in the string");
test.assert(String.sprintf("hey %s you have %d days", "alex", "365"), "hey alex you have 365 days", "String.sprintf should format the values in the string");
test.assert(String.padStart("key => val", 15, "-"), "-----key => val", "String.padStart should add leading characters to comply with the given length");
test.assert(String.padEnd("key => val", 15, "-"), "key => val-----", "String.padEnd should add trailing characters to comply with the given length");
test.assert(String.reverse("abcdefg"), "gfedcba", "String.reverse should should reverse the string");
test.assert(String.count("good morning, soon...", "oo"), 2, "String.count should return the number of times the substring is in the string");
test.assert(String.isUpper("WHAT ARE YOU DOING?"), true, "String.isUpper should return true when all the string characters are uppercase");
test.assert(String.isLower("what are you doing here?"), true, "String.isLower should return true when all the string characters are lowercase");
test.assert(String.capitalize("welcome back"), "Welcome back", "String.capitalize should return the string capitalized");
test.assert(String.fromCharCodes(2023, 65, 61), "ߧA=", "String.fromCharCodes should return a string created from the specified sequence of UTF-8 code units");

# Table

printLine("\nStdlib Table");

test.assert(Table.get([ 'name' = 'a', 'age' = 23 ], 'age'), 23, "Table.get should return the value with the given key in the table");
test.assert(Table.get([ 'name' = 'a', 'age' = 23 ], 'city'), null, "Table.get should return null when the key doesn't exists in the table");
test.assert(Table.getSize([ 'name' = 'a', 'age' = 23, 'city' = 'Longyearbyen' ]), 3, "Table.getSize should return the number of elements in the table");

any tab = [ 1 ];
Table.push(tab, [ 2 ]);
test.assert(tab, [ 1, [ 2 ] ], "Table.push should push the given value in the table");

Table.prepend(tab, "you");
test.assert(tab, [ '2' = 'you', '0' = 1, '1' = [ 2 ] ], "Table.prepend should prepend the given value in the table");

any pop = Table.pop(tab);
test.assert(pop, [ 2 ], "Table.pop should return the last item in the table");
test.assert(tab, [ '2' = 'you', '0' = 1 ], "Table.pop should remove the last item in the table");

any shift = Table.shift(tab);
test.assert(shift, 'you', "Table.shift should return the first item in the table");
test.assert(tab, [ '0' = 1 ], "Table.shift should remove the first item in the table");

test.assert(Table.getKeys([ 'name' = 'asd', 'age' = 123, 'city' = 'NY']), [ 'name', 'age', 'city' ], "Table.getKeys should return the table keys");
test.assert(Table.hasKey([ 'name' = 'asd', 'age' = 123, 'city' = 'NY'], 'age'), true, "Table.hasKey should return true when the key exists");
test.assert(Table.hasKey([ 'name' = 'asd', 'age' = 123, 'city' = 'NY'], 'width'), false, "Table.hasKey should return false when the key does not exists");
test.assert(Table.join([ 'hello', 'world', 'again' ]), "helloworldagain", "Table.join should return the given string joined");
test.assert(Table.join([ 'hello', 'world', 'again' ], " "), "hello world again", "Table.join should return the given string joined by the given glue");
test.assert(Table.has([ 'name' = 'asd', 'age' = 123, 'city' = [ 0 ] ], [ 0 ]), true, "Table.has should return true when the value exists");

any reversed = [ 'name' = 'asd', 'age' = 123, 'city' = [ 0 ] ];
Table.reverse(reversed);
test.assert(reversed, [ 'city' = [ 0 ], 'age' = 123, 'name' = 'asd' ], "Table.reverse should reverse the table");

test.assert(Table.range(0, 5), [ 0,1,2,3,4,5 ], "Table.range should return an table with the given range");
test.assert(Table.range(0, 5, 2), [ 0,2,4 ], "Table.range should return an table with the given range and steps");

tab = [ 6,2,7,3,6,7,9,0,1,2,3 ];
Table.sort(tab);
any sorted = [];
foreach (tab, val) {
    sorted []= val;
}
test.assert(sorted, [ 0,1,2,2,3,3,6,6,7,7,9 ], "Table.sort should sort the table");

any age_tab = [
    [
        'age' = 23,
    ],
    [
        'age' = 20,
    ],
    [
        'age' = 15,
    ],
];

Table.sort(age_tab, f(a,b) {
    return a['age'] - b['age'];
});

test.assert(age_tab, [
    2 = [
        'age' = 15,
    ],
    1 = [
        'age' = 20,
    ],
    0 = [
        'age' = 23,
    ],
], "Table.sort should sort the table with the given function");

test.assert(Table.column([
    [
        'name' = 'alex',
        'age' = 23,
    ],
    [
        'name' = 'evan',
        'age' = 29,
    ],
    [
        'name' = 'carlos',
        'age' = 32,
    ],
], 'name'), [ 'alex', 'evan', 'carlos' ], "Table.column should return the values from a single column in the table");

test.assert(Table.map([ 1, 2, 3 ], f(e) { return e + 1; }), [ 2, 3, 4 ], "Table.map should map the given table");
test.assert(Table.filter([ 1, 2, 3, 4, 5, 6 ], f(e) { return e % 2 == 0; }), [ 1 = 2, 3 = 4, 5 = 6 ], "Table.filter should filter the given table");
test.assert(Table.reduce([ 1, 2, 3 ], f(acc, el) { return acc + el; }), 6, "Table.reduce should reduce the given table to a single value");
test.assert(Table.merge([ 'name' = 'a', 'age' = 23 ], [ 'name' = 'b', 'city' = 'NY' ]), [ 'name' = 'b', 'age' = 23, 'city' = 'NY' ], "Table.merge should return a merge of the given tables");
test.assert(Table.some([ 1, 2, 3, 4 ], f(e) { return e > 0; }) && !Table.some([ 1, 2, 3, 4 ], f(e) { return e <= 0; }), true, "Table.some should return true whether at least one element passes the test in the given closure");
test.assert(
    Table.fill(0, 3, 2) === [ '0' = 2, '1' = 2, '2' = 2 ] &&
    Table.fill(5, 6, [ 'a' ]) === [ '5' = [ 'a' ], '6' = [ 'a' ], '7' = [ 'a' ], '8' = [ 'a' ], '9' = [ 'a' ], '10' = [ 'a' ] ]
, true, "Table.fill should return a filled table");

# Number

printLine("\nStdlib Number");

test.assert(Number.min(4,9,5,1,7,2,4,6,8,1,-7), -7, "Number.min should return the minimum value");
test.assert(Number.max(4,9,5,1,7,2,4,6,8,1,-7), 9, "Number.max should return the maximum value");
test.assert(Number.isNan(7), false, "Number.isNan should return false when the value is a number");
test.assert(Number.isNan(0/0), true, "Number.isNan should return false when the value is not a number");
test.assert(Number.isFinite(7), true, "Number.isFinite should return true when the number is finite");
test.assert(Number.isFinite(1/0), false, "Number.isFinite should return false when the number is not finite");
test.assert(Number.format(1850320.45, ".", ","), "1.850.320,45", "Number.format should return the number formatted");

# Json

printLine("\nStdlib Json");

any json = '{"name":"alex","age":23,"tab":{},"arr":[1]}';
test.assert(Json.parse(json), [
    'name' = 'alex',
    'age' = 23,
    'tab' = [],
    'arr' = [ 1 ],
], "Json.parse should return the value of the given json string");
test.assert(Json.parse('asd'), null, "Json.parse should return null when the given json representation is not valid");

test.assert(Json.isValid(json), true, "Json.isValid should return true when the given json representation is valid");
test.assert(Json.isValid('{ "a": "b", "b": "c", }'), false, "Json.isValid should return false when the given json representation is not valid");

# Math

printLine("\nStdlib Math");

# Used to allow results with different precision across multiple systems
number getSlice(number n) {
    return toNumber(String.slice(toString(n), 0, 8));
}

test.assert(Math.floor(1.234), 1, "Math.floor should round down the given value");
test.assert(Math.ceil(1.234), 2, "Math.floor should round up the given value");
test.assert(Math.round(1.4) ^ Math.round(1.52), "12", "Math.round should round the given value");
test.assert(Math.abs(-43), 43, "Math.abs should return the absolute value");
test.assert(getSlice(Math.cos(1.4)), 0.169967, "Math.cos should return the cosine of the given number");
test.assert(getSlice(Math.acos(0.4)), 1.159279, "Math.acos should return the of the arc cosine given number");
test.assert(getSlice(Math.cosh(1.7)), 2.828315, "Math.cosh should return the hyperbolic cosine of the given number");
test.assert(getSlice(Math.acosh(1.7)), 1.123230, "Math.acosh should return the arc hyperbolic cosine of the given number");
test.assert(getSlice(Math.sin(1.4)), 0.985449, "Math.sin should return the sine of the given number");
test.assert(getSlice(Math.asin(0.4)), 0.411516, "Math.asin should return the arc sine of the given number");
test.assert(getSlice(Math.sinh(1.7)), 2.645631, "Math.sinh should return the hyperbolic sine of the given number");
test.assert(getSlice(Math.asinh(1.7)), 1.300820, "Math.asinh should return the arc hyperbolic sine of the given number");
test.assert(getSlice(Math.tan(1.4)), 5.797883, "Math.tan should return the tangent of the given number");
test.assert(getSlice(Math.atan(2.4)), 1.176005, "Math.atan should return the arc tangent of the given number");
test.assert(getSlice(Math.tanh(2.4)), 0.983674, "Math.tanh should return the hyperbolic tangent of the given number");
test.assert(getSlice(Math.atanh(0.45)), 0.484700, "Math.atanh should return the arc hyperbolic tangent of the given number");
test.assert(Math.sqrt(841), 29, "Math.sqrt should return the square root of the given number");
test.assert(getSlice(Math.log(4.6)), 1.526056, "Math.log should return the natural logarithm of the given number");

# Crypt

printLine("\nStdlib Crypt");

test.assert(Crypt.sha1("hello world again"), "b84a9b2362aee3556081792f3b7abd3958da8deb", "Crypt.sha1 should return the sha1 of the given value");
test.assert(Crypt.sha256("hello world again"), "cbb2d50bd9c870e0f098b9230d66d2f74d55544f2e57f1aabe3830443a040eb6", "Crypt.sha256 should return the sha256 of the given value");
test.assert(Crypt.md5("this is a text in md5"), "0df860a9e9196fe362d16eccab3ec765", "Crypt.md5 should return the md5 of the given value");

# Bit

printLine("\nStdlib Bit");

test.assert(Bit.and(2, 3), 2, "Bit.and should return the bitwise operation and");
test.assert(Bit.or(3, 6), 7, "Bit.or should return the bitwise operation or");
test.assert(Bit.leftShift(-3, 2), -12, "Bit.leftShift should return the bitwise operation left shift");
test.assert(Bit.rightShift(8, 2), 2, "Bit.rightShift should return the bitwise operation right shift");
test.assert(Bit.not(-1), 0, "Bit.not should return the bitwise operation not");

# Date

printLine("\nStdlib Date");

any date_time = 1617557432 - Date.getGMTOffset();
test.assert(Date.toString("%Y-%m-%d %H:%M:%S", date_time), "2021-04-04 17:30:32", "Date.toString should return the date string of the given unix timestamp");
test.assert(Date.fromString("2021-04-04 17:30:32"), date_time, "Date.fromString should return the unix timestamp of the given date string");
test.assert(Date.toTable(date_time), [
    'seconds' = 32,
    'minutes' = 30,
    'hours' = 17,
    'day' = 4,
    'month' = 4,
    'year' = 2021,
    'yday' = 94,
    'wday' = 1,
], "Date.toTable should return a table based on the given unix timestamp");

# Os

printLine("\nStdlib Os");

test.assert(Os.isFile(_FILE), true, "isFile should return true when the given path is for an existing file");
test.assert(Os.isDir(Os.clearPath(_FILE ^ '/../')), true, "isDir should return true when the given path is for an existing directory");
test.assert(Os.clearPath("/home/./user/Documents/../Downloads"), "/home/user/Downloads", "clearPath should return the given path resolved");
test.assert(Os.exists(Os.clearPath(_FILE ^ '/../')) && Os.exists(_FILE), true, "exists should return true when the given path exists");
if (Os.PLATFORM eq 'windows') {
    test.assert(Os.isAbsolute("C:\\Program files"), true, "isAbsolute should return true when the given path is absolute");
    test.assert(Os.isAbsolute("./Program files"), false, "isAbsolute should return false when the given path is not absolute");
} else {
    test.assert(Os.isAbsolute("/Program files"), true, "isAbsolute should return true when the given path is absolute");
    test.assert(Os.isAbsolute("./Program files"), false, "isAbsolute should return false when the given path is not absolute");
}

# General

printLine("\nStdlib General");

test.assert(toString([]), "[table]", "toString should convert the given value to string");
test.assert(toNumber("1.46"), 1.46, "toNumber should convert the given value to number");
test.assert(toBool("hello"), true, "toBool should convert the given value to a boolean");

test.assert(!isEmpty(12) && isEmpty(0) &&
!isEmpty('hello') && isEmpty('') &&
!isEmpty([ 1 ]) && isEmpty([]) &&
!isEmpty([ 'foo' ]) && isEmpty([]) &&
isEmpty(null), true, "isEmpty should return true when the given value is blank, false otherwise");

eval('any var_in_eval = true;');
test.assert(var_in_eval, true, "eval should evaluate the code in the given string");
test.assert(t(15 > 18, 'true', 'false'), "false", "t should work like the ternary operator with the given arguments");
test.assert(typeof('hola') ^ typeof(42), "stringnumber", "typeof should return the type of the given value");
